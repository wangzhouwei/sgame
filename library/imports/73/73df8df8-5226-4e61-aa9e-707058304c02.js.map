{"version":3,"sources":["../../../../../assets/Script/Event/assets/Script/Event/GameEventManager.js"],"names":["EventManager","require","GameEventManager","cc","Class","extends","gameSocket","hostStr","reconnectMaxNum","reconnectCount","reconnectTime","reconnectTimer","isDisConnect","_heartCheckTime","_heartCurTime","_heartIsOk","_heartTimer","_ownSet","_isReconnect","ctor","setCallBack","target","connect","callBack","log","self","WebSocket","onopen","cleanReconnectTimer","xx","Tips","hide","heartCheck","reconnected","Function","onerror","errormsg","onclose","reconnect","onmessage","data","JSON","parse","msgId","mid","funId","fid","msgData","onMsg","sys","isNative","handleData","fileReader","FileReader","onload","progressEvent","utfs","result","readAsArrayBuffer","sendMessage","state","readyState","OPEN","stringify","send","error","timeFun","str","clearTimeout","setTimeout","changeConnectHost","show","console","undefined","close","isDis","bytes","Uint8Array","body","byteLength"],"mappings":"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","file":"GameEventManager.js","sourceRoot":"../../../../../assets/Script/Event","sourcesContent":["\nconst EventManager = require('./EventManager.js');\nconst GameEventManager = cc.Class({\n    extends: EventManager,\n    gameSocket: null,\n    hostStr: null, // 连接的地址\n    reconnectMaxNum: null,  // 重连的最大次\n    reconnectCount: null, // 重连的计数\n    reconnectTime: null, // 重连的间断时间\n    reconnectTimer: null, // 重连的调度器\n\n    isDisConnect: null,  // 是否是主动断开连接\n    _heartCheckTime: null, // 心跳检测的时间\n    _heartCurTime: null, // 当前的时间\n    _heartIsOk: null, // 心跳检测是否正常\n    _heartTimer: null, // 心跳检测的调度器\n\n    _ownSet: null,// 回调监听的对象\n    _isReconnect: null, // 是否是重连的\n    /**\n     *  构造函数\n     */\n    ctor() {\n        this.gameSocket = null;\n        this.reconnectMaxNum = 10;\n        this.reconnectCount = 0;\n        this.reconnectTime = 1000;\n        this.reconnectTimer = null;\n        this.isDisConnect = false;\n        this.hostStr = null;\n        this._heartCheckTime = 1000;\n        this._heartCurTime = 0;\n        this._heartIsOk = true;\n        this._heartTimer = null;\n        this._isReconnect = false;\n    },\n    /**\n     *  设置回调监听的对象\n     */\n    setCallBack(target) {\n        this._ownSet = target;\n    },\n    /**\n     *  连接服务器，已经监听服务器一系列事件\n     */\n    connect(hostStr, callBack) {\n        cc.log(`进行网络连接, hostStr = ${hostStr}`);\n        this.hostStr = hostStr;\n        const self = this;\n        this.gameSocket = new WebSocket(hostStr);\n        this.gameSocket.onopen = () => {\n            cc.log(`websocket has connect`);\n            this.cleanReconnectTimer();\n            this._heartIsOk = true;\n            cc.xx.Tips.hide();\n            this.heartCheck();\n            if (this._isReconnect) {\n                if (this._ownSet) {\n                    this._ownSet.reconnected();\n                }\n                this._isReconnect = false;\n            }\n            if (callBack && callBack instanceof Function) {\n                callBack();\n            }\n        };\n        this.gameSocket.onerror = (errormsg) => {\n            cc.log(`websocket connect error`,errormsg);\n        };\n        this.gameSocket.onclose = () => {\n            cc.log(`websocket has close`);\n            if (!this.isDisConnect) {\n                this.reconnect();\n            }\n        };\n        this.gameSocket.onmessage = (data) => {\n            if (data.data == \"pong\") {\n                // cc.log(`heart: ${data.data}`);\n                this._heartIsOk = true;\n            } else {\n                data = JSON.parse(data.data);\n                const msgId = data.mid;\n                const funId = data.fid\n                const msgData = data.data;\n                self.onMsg(funId,msgId,msgData);\n            }\n            return;\n            //  todo 以下是用protobuf传输数据写法\n            if (cc.sys.isNative) {\n                self.handleData(data.data);\n            } else {\n                const fileReader = new FileReader();  //  在浏览器中读取文件\n                fileReader.onload = function (progressEvent) {  //  读取文件完成后触发（成功读取）\n                    const utfs = this.result;  //  result就是读取的结果\n                    self.handleData(utfs);\n                };\n                fileReader.readAsArrayBuffer(data.data);\n            }\n        };\n        this.gameSocket.sendMessage = (msgData, state) => {\n            if (this.gameSocket.readyState === WebSocket.OPEN) {\n                cc.log(`发送的消息为：${JSON.stringify(msgData)}`);\n                if (state) {\n                    this.gameSocket.send(msgData)\n                } else {\n                    this.gameSocket.send(JSON.stringify(msgData));\n                }\n            } else {\n                cc.error(`websocket connect error: ${this.gameSocket.readyState}`);\n            }\n        };\n    },\n    /**\n     * 心跳检测\n     */\n    heartCheck() {\n        const timeFun = () => {\n            if (this._heartIsOk) {\n                if (this.gameSocket) {\n                    const str = \"ping\";\n                    if (this.gameSocket.readyState === WebSocket.OPEN) {\n                        this._heartIsOk = false;\n                        // this.gameSocket.send(str);\n                        this.sendMessage(str, true)\n                    }\n                }\n                this._heartCurTime = 0;\n            } else {\n                this._heartCurTime ++;\n            }\n            if (this._heartCurTime >= 5) {\n                cc.log(`心跳检测有问题`);\n                clearTimeout(this._heartTimer);\n                // this.close(false);\n            } else {\n                this.heartCheck();\n            }\n        };\n        this._heartTimer = setTimeout(timeFun, this._heartCheckTime);\n    },\n\n    /**\n     *  重连\n     */\n    reconnect() {\n        if (this.reconnectCount > this.reconnectMaxNum) {\n            cc.log(\"重连次数已达最大\");\n            this.hostStr = this.changeConnectHost();\n            if(!this.hostStr){\n                return;\n            };\n            this.reconnectCount = 0;            \n        }\n        this.reconnectTimer = setTimeout(() => {\n            cc.log(`正在进行第${this.reconnectCount}次重连`);\n            cc.xx.Tips.show(\"网络连接中断，正在重新连接....\");\n            this.connect(this.hostStr);\n            this._isReconnect = true;\n            this.reconnectCount ++;\n        }, this.reconnectTime);\n    },\n\n    /**\n     *  连接成功，清空重连的调度器\n     */\n    cleanReconnectTimer() {\n        this.reconnectCount = 0;\n        if (this.reconnectTimer) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimer = null;\n        }\n    },\n\n    /**\n     *  发送消息给服务端\n     * @param msgId 消息的id\n     * @param msgData 消息的数据\n     */\n    sendMessage(msgData, state) {\n        console.log('sendMessage ',msgData, state)\n        if (msgData === null || msgData === undefined) {\n            msgData = null;\n            cc.log(`消息为空`);\n            return;\n        }\n        this.gameSocket.sendMessage(msgData, state);\n    },\n    /**\n     *  关闭与服务器的连接(主动断开)\n     */\n    close(isDis) {\n        this.gameSocket.close();\n        this.gameSocket = null;\n        this.isDisConnect = isDis;\n    },\n    /**\n     *  处理数据（反序列化以及转化）\n     * @param data 数据\n     */\n    handleData(data) {\n        const bytes = new Uint8Array(data);  // 转化数据\n        let msgId = bytes[0];  //  协议id放在uint8Array的第一位\n        const body = new Uint8Array(data, 1, data.byteLength - 1);\n        this.onMsg(msgId, body);\n    },\n});\n"]}