{"version":3,"sources":["EventManager.js"],"names":["EventManager","cc","Class","observerList","msgList","_isCache","_cacheList","statics","getInstance","eventManager","ctor","addObserver","target","forEach","item","push","log","length","removeObserver","index","splice","notifyEvent","funId","msgId","msgData","onMessageEvent","err","error","addMsg","event","data","msg","notifyMsg","xx","roomEvent","cleanMsgList","addMsgToCacheList","body","cleanCacheList","setIsCache","state","notifyCacheList","cacheMsg","room","huing"],"mappings":"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","file":"EventManager.js","sourceRoot":"../../../../../assets/Script/Event","sourcesContent":["/**\n * Created by Administrator on 2017/8/29.\n */\n/**\n *  观察者类\n * @type {Function}\n */\nconst EventManager = cc.Class({\n    observerList: null, // 观察者列表\n    msgList: null, // 消息列表\n    _isCache: null, // 是否协议缓存\n    _cacheList: null, // 协议缓存列表\n    statics: {\n        getInstance() {\n            if (!this.eventManager) {\n                this.eventManager = new EventManager()\n            }\n            return this.eventManager\n        },\n    },\n    ctor() {\n        this.observerList = [];\n        this.msgList = [];\n        this._isCache = false;\n        this._cacheList = [];\n    },\n\n    /**\n     *  添加观察者\n     * @param target\n     */\n    addObserver(target) {\n        this.observerList.forEach((item) => {\n             if (item == target) {\n                 return true\n             }\n        });\n        if (target) {\n            this.observerList.push(target);\n        } else {\n            cc.log(\"target is null\");\n        }\n        cc.log(\"observerList.length = \", this.observerList.length);\n    },\n\n    /**\n     *  移除观察者\n     * @param target\n     */\n    removeObserver(target) {\n        if (!target) {\n            cc.log(\"target is null\");\n        } else {\n            this.observerList.forEach((item, index) => {\n                if (item == target) {\n                    this.observerList.splice(index, 1);\n                }\n            });\n        }\n        cc.log(\"observerList.length = \", this.observerList.length);\n    },\n\n    /**\n     *  时间发生变化,通知观察者\n     */\n    notifyEvent(funId,msgId,msgData){\n        try {\n            this.observerList.forEach((item) => {\n                item.onMessageEvent(funId,msgId,msgData);\n            });\n        } catch (err) {\n            cc.error(err);\n        }\n    },\n    /**\n     *  添加消息列表\n     * @param event 消息id\n     * @param data 消息内容\n     */\n    addMsg(event, data) {\n        const msg = {\n            event: event,\n            data: data,\n        };\n        this.msgList.push(msg);\n    },\n    /**\n     *  下发存储的消息\n     */\n    notifyMsg() {\n        this.msgList.forEach((item) => {\n            cc.xx.roomEvent.notifyEvent(item.event, item.data);\n        });\n    },\n    /**\n     *  清空存储的消息列表\n     */\n    cleanMsgList() {\n        this.msgList = [];\n    },\n    /**\n     *  将消息加入协议缓存列表\n     * @param event id\n     * @param data 数据\n     */\n    addMsgToCacheList(event, data) {\n        cc.log(`将协议缓存下来`);\n        let body = {\n            event: event,\n            data: data,\n        };\n        this._cacheList.push(body);\n    },\n    /**\n     *  q清空列表\n     */\n    cleanCacheList() {\n        this._cacheList = [];\n    },\n    /**\n     *  缓存的开关\n     * @param state\n     */\n    setIsCache(state) {\n        this._isCache = state;\n    },\n    /**\n     *  下发缓存中的协议\n     */\n    notifyCacheList() {\n        // this._cacheList.forEach((item, index) => {\n        //     if (this._isCache) {\n        //         setTimeout((item, ) => {\n        //             cc.xx.roomEvent.notifyEvent(item.event, item.data);\n        //         }, 1000);\n        //     }\n        // });\n        // if(!this._isCache) {\n        //     cc.log(\"执行缓存的开关\");\n        //     return;\n        // }\n        if (this._isCache && this._cacheList.length > 0) {\n            const cacheMsg = this._cacheList[0];\n            if(cc.xx.room.huing) {\n                if(cacheMsg.event === 4018 || cacheMsg.event == \"room_game_data\") {\n                    cc.log(\"还没到胡牌动画\");\n                    return;\n                }\n            }\n            this._cacheList.splice(0, 1);\n            cc.log(`下一条协议：${cacheMsg.event}`);\n            cc.xx.roomEvent.notifyEvent(cacheMsg.event, cacheMsg.data);\n        }\n    },\n});\n"]}